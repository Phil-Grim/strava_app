import streamlit as st
import httpx
import requests
import base64
import pandas as pd
from strava.constants import *


def header():
    """
    Function to add 3 columns to the page, along with an empty container in the 3rd column.

    Returns:
        - col1, col2, col3, strava_button: a tuple containing 3 columns and an empty container. These can be used to add content to the respective columns.
    """

    col1, col2, col3 = st.columns(3)

    with col3:
        strava_button = st.empty()

    return col1, col2, col3, strava_button


@st.cache_data(show_spinner=False)
def load_image_as_base64(image_path):
    """
    Function to read the contents of an image file and encode the binary content using Base64.

    Args:
        - image_path: the image file path.
    Returns:
        - base64_string: base64-encoded string representation of the image file.
    """

    with open(image_path, "rb") as f:
        contents = f.read()
    base64_string = base64.b64encode(contents).decode("utf-8")
    return base64_string


@st.cache_data(show_spinner=False)
def authorization_url():
    """
    Function to generate a url for an authorisation page which prompts the user to grant the application access to their data.
     
    Returns:
     - authorisation_url: the authorisation page url.
    """

    request = httpx.Request(
        method="GET",
        url=STRAVA_AUTHORIZATION_URL,
        params={
            "client_id": STRAVA_CLIENT_ID,
            "redirect_uri": APP_URL,
            "response_type": "code",
            "approval_prompt": "auto",
            "scope": "activity:read_all"
        }
    )
    authorisation_url = request.url
    return authorisation_url


def login_header(header=None):
    """
    Function to add images and a link to the authorisation url to the login page

    Args:
        - header: header generated by the header() function
    Returns:
        - None
    """

    strava_authorization_url = authorization_url()

    if header is None:
        base = st
    else:
        col1, _, _, button = header
        base = button

    with col1:
        st.image('static/api_logo_pwrdBy_strava_horiz_light.png')

    base64_image = load_image_as_base64("./static/btn_strava_connectwith_orange@2x.png")
    base.markdown(
        (
            f"<a href=\"{strava_authorization_url}\">"
            f"  <img alt=\"strava login\" src=\"data:image/png;base64,{base64_image}\" width=\"100%\">"
            f"</a>"
        ),
        unsafe_allow_html=True,
    )


@st.cache_data(show_spinner=False)
def exchange_authorization_code(authorization_code):
    """
    Function to return json dict containing athlete-specific data (including refresh and access tokens, which can be used to send requests
    for athlete/activity data).
    
    Args:
        - authorization_code: a code parameter included in the query string upon athlete authentication at the authentication url (see documentation: https://developers.strava.com/docs/authentication/). 
    Returns:
        - strava_auth: json dict containing ahtlete's refresh and access tokens, along with other personal information (including first and last name).
    """

    response = httpx.post(
        url="https://www.strava.com/oauth/token",
        json={
            "client_id": STRAVA_CLIENT_ID,
            "client_secret": STRAVA_CLIENT_SECRET,
            "code": authorization_code,
            "grant_type": "authorization_code",
        }
    )
    try:
        response.raise_for_status()
    except httpx.HTTPStatusError:
        st.error("Something went wrong while authenticating with Strava. Please reload and try again")
        st.query_params.dict()
        st.stop()
        return

    strava_auth = response.json()

    return strava_auth


def logout_header(strava_auth, header=None):
    """
    Function to return header content (images, personalised welcome, log out button) once user has logged in.
    
    Args:
        - strava_auth: json dictionary returned from exchange_authorisation_code() function.
    Returns:
        - None. 
    """

    if header is None:
        base = st
    else:
        col1, col2, _, button = header
        base = button

    with col1:
        first_name = strava_auth["athlete"]["firstname"]
        last_name = strava_auth["athlete"]["lastname"]
        col1.markdown(f"*Welcome, {first_name} {last_name}!*") 

    with col2:
        st.image('static/api_logo_pwrdBy_strava_horiz_light.png')

    base.markdown(f'''
        <a target="_self" href={APP_URL}><button style="background-color:{STRAVA_ORANGE};">Log Out</button></a>
        ''',
        unsafe_allow_html=True)


def authentication(header=None):
    """Function to extract authorisation code and generate login or logout headers depending on whether the authorisation code has been received.
    
    Args:
        - header: header (with 3 columns) generated by the header() function.
    Returns:
        - strava_auth: json dictionary generated by exchange_authorization_code() function.
    """
    
    query_parameters = st.query_params.to_dict()
    try: 
        authorisation_code = query_parameters["code"]
    except:
        authorisation_code = None

    if authorisation_code is None:
        login_header(header=header)
        return
    else:
        strava_auth = exchange_authorization_code(authorisation_code)
        logout_header(strava_auth, header=header)
        

    return strava_auth


def refresh_from_authentication(auth):
    """
    Function to extract an athlete's refresh token from the json dictionary generated by exchange_authorization_code() function
     
    Args:
        - auth: json dictionary generated by exchange_authorization_code() function
    Returns:
        - refresh_token: a long-lived token which can be use to extract short-lived access tokens (which are in turn used to obtain or modify strava resources) 
    """

    refresh_token = auth["refresh_token"]
    return refresh_token


def access_from_refresh(refresh_token):
    """
    Function to extract an athlete's access token using their refresh token. As refresh tokens are long-lived, while access tokens
    are short-lived, this function allows for effective use of the cache_data decorator in the analysis module in order to limit the number of
    requests sent to the strava Api. The refresh token rather than the access token is used as a function input, and this function is then
    called within the analysis functions.
    
    Args:
        - refresh token: a unique token used to extract an athlete's access token
    Returns:
        - access token: a token which can be used to obtain or modify strava resources. Access tokens expire after 6 hours. 
    """
    
    auth_url = "https://www.strava.com/oauth/token"

    payload = {
        'client_id': STRAVA_CLIENT_ID,
        'client_secret': STRAVA_CLIENT_SECRET,
        'refresh_token': refresh_token, # should stay the same, allowing you to fetch access_token (which changes every few hours)
        'grant_type': "refresh_token",
        'f': 'json'
    }

    res = requests.post(auth_url, data=payload, verify=False)

    access_token = res.json()['access_token']

    return access_token
    
